#use-added-syntax(tests)
defpackage z3/tests/Solver :
  import core
  import z3/Context
  import z3/Sorts
  import z3/Solver
  import z3/AST/AST
  import z3/AST/Functions
  import z3/AST/Numerals
  import z3/AST/Operators


deftest(solver) test-basic:

  val cfg = Config()
  val ctx = Context(cfg)

  val s = Solver(ctx)
  val name = "x"
  val x = IntVar(ctx, name)
  val y = IntVar(ctx, "y")

  assert-on(s, x > 2)
  assert-on(s, y < 10)
  assert-on(s, z-equal?(x + (y * 2), 7))

  val r = check(s)
  println("Result: %_" % [r])

  val m = get-model(s)
  println("%~" % [m])

deftest(solver) test-divider :

  val cfg = Config()
  val ctx = Context(cfg)

  val s = Solver(ctx)
  val [R1, R2] = to-tuple(RealVars(ctx, ["R1", "R2"])) as [AST, AST]
  val [Vin, Vout] = to-tuple(RealVars(ctx, ["Vin", "Vout"])) as [AST, AST]

  assert-on(s, z-equal?(R1, 100.0e3))
  assert-on(s, z-equal?(Vin, 24.0))
  assert-on(s, z-equal?(Vout, 6.0))

  assert-on(s, R2 > 0.0)
  assert-on(s, z-equal?(Vout, Vin * (R2 / (R1 + R2))))


  val r = check(s)
  println("Result: %_" % [r])

  val m = get-model(s)
  println("%~" % [m])

